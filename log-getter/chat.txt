아래와 같이 Log 를 수집해 PostgreSQL DB 에 적재하는 시스템을 개발중이야.

React 로 log 를 모니터링하는 실시간 차트를 생성하게 해줘.

추가로 필요한 파일은 알려주면 전달할께.
.
├── Dockerfile
├── README.md
├── autocomplete.json
├── chat.txt
├── docker-compose.yaml
├── gpt.txt
├── initdb.sql
├── log-getter.code-workspace
├── package-lock.json
├── package.json
├── src
│   ├── server.ts
│   └── test.ts
├── tree.txt
└── tsconfig.json

2 directories, 14 files


* 초기화

```bash
$ npm install
```

* 빌드

```bash
$ npm run build
```

* 실행

```bash
$ npm run start
```

* 디버깅 실행

```bash
$ npm run debug
```

* 배포

```bash
$ npm run deploy
```

* DB 초기화

윈도우의 경우
```bash
> type initdb.sql | docker exec -i log-db psql -U log-getter -d log_db
```

리눅스의 경우
```bash
$ cat initdb.sql | docker exec -i log-db psql -U log-getter -d log_db
```

* 재배포

```bash
$ npm run deploy
```

* 특정 컨테이너 중지 및 시작

```bash
$ npm run stop-log-getter
$ npm run start-log-getter
```
package.json
{
  "name": "log-getter",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "build": "esbuild src/server.ts --bundle --outdir=dist --platform=node --sourcemap",
    "clean": "rimraf dist",
    "rebuild": "npm run clean && npm run build",
    "deploy": "npm run build && docker-compose down && docker rmi log-getter && docker-compose up -d",
    "start": "npm run build && node dist/server.js",
    "debug": "npm run build && node --inspect dist/server.js",
    "tree": "tree -I 'node_modules|data|cpython-3.12|public|uploads|logs|dist|dist-ssr|*.log|*.local|.vscode|.idea|.DS_Store|*.suo|*.ntvs*|*.njsproj|*.sln|*.sw?' --prune > tree.txt",
    "gpt": "cp gpt.txt chat.txt && cat tree.txt >> chat.txt && echo \"\n\" >> chat.txt &&cat README.md >> chat.txt && echo package.json >> chat.txt && cat package.json >> chat.txt && echo initdb.sql >> chat.txt && cat initdb.sql >> chat.txt",
    "stop-log-getter": "docker-compose stop log-getter",
    "start-log-getter": "docker-compose up -d log-getter"
  },
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "body-parser": "^2.2.0",
    "cors": "^2.8.5",
    "express": "^5.1.0",
    "pg": "^8.14.1"
  },
  "devDependencies": {
    "@types/body-parser": "^1.19.5",
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.1",
    "@types/node": "^22.14.1",
    "@types/pg": "^8.11.13",
    "esbuild": "^0.25.3",
    "rimraf": "^5.0.0"
  }
}
initdb.sql
DROP TABLE IF EXISTS log_table;

CREATE TABLE IF NOT EXISTS log_table (
  log_id SERIAL PRIMARY KEY, -- 자동 증가되는 log_id 필드
  timestamp BIGINT DEFAULT (EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000), -- 밀리초 단위로 저장
  user_id VARCHAR(100), -- JSON 데이터의 data.userId 필드
  user_agent TEXT, -- JSON 데이터의 data.userAgent 필드
  event_name VARCHAR(100), -- JSON 데이터의 data.eventName 필드
  schema_version VARCHAR(10), -- JSON 데이터의 data.schema 필드
  max_prompt_tokens INT, -- JSON 데이터의 data.maxPromptTokens 필드
  debounce_delay INT, -- JSON 데이터의 data.debounceDelay 필드
  max_suffix_percentage FLOAT, -- JSON 데이터의 data.maxSuffixPercentage 필드
  prefix_percentage FLOAT, -- JSON 데이터의 data.prefixPercentage 필드
  transform BOOLEAN, -- JSON 데이터의 data.transform 필드
  multiline_completions VARCHAR(50), -- JSON 데이터의 data.multilineCompletions 필드
  sliding_window_prefix_percentage FLOAT, -- JSON 데이터의 data.slidingWindowPrefixPercentage 필드
  sliding_window_size INT, -- JSON 데이터의 data.slidingWindowSize 필드
  prompt TEXT, -- JSON 데이터의 data.prompt 필드
  completion TEXT, -- JSON 데이터의 data.completion 필드
  model_provider VARCHAR(100), -- JSON 데이터의 data.modelProvider 필드
  model_name VARCHAR(100), -- JSON 데이터의 data.modelName 필드
  filepath TEXT, -- JSON 데이터의 data.filepath 필드
  git_repo VARCHAR(100), -- JSON 데이터의 data.gitRepo 필드,
  completion_id VARCHAR(100), -- JSON 데이터의 data.completionId 필드
  num_lines INT DEFAULT 0 -- JSON 데이터의 data.numLines 필드, 기본값 0
);

CREATE INDEX idx_log_id ON log_table (log_id);
CREATE INDEX idx_user_id ON log_table (user_id);
